"""
Django settings for panda_backend project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
import channels

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*7!!kc@bmtx8ngui6lr@xmifmcwm6y%hnbe)rdei(b!ds8t)uq'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['pandagrown.com', 'localhost', '127.0.0.1', 'api.pandagrown.com']
CORS_ALLOWED_ORIGINS = [
    # Add the origins from which your React project will make requests
    'http://localhost:3000',  # Example: if your React app runs on http://localhost:3000
    'http://203.161.57.73:80',
    'http://203.161.57.73',
    'http://localhost:8000',
    'http://localhost:8000/swagger',
    'http://192.168.2.185:3000',
    'http://192.168.2.184:3000',
    'https://pandagrown.com',
    'https://api.pandagrown.com'
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # installed modules
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'celery',
    'channels',
    
    # created apps
    'admin_api',
    'panda_backend',
    'basic_auth',
    'user',
    'base',
    'shop',
    'payment',
    'websocket_app'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',                    # CORS
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'channels.middleware.ProtocolTypeRouter',
    # 'channels.middleware.WebsocketMiddleware',
    # 'django_ip_geolocation.middleware.IpGeolocationMiddleware',
]

# IP_GEOLOCATION_SETTINGS = {
#     'BACKEND': 'django_ip_geolocation.backends.IPGeolocationAPI',
#     'BACKEND_API_KEY': '',
#     'BACKEND_EXTRA_PARAMS': {},
#     'BACKEND_USERNAME': '',
#     'RESPONSE_HEADER': 'X-IP-Geolocation',
#     'ENABLE_REQUEST_HOOK': True,
#     'ENABLE_RESPONSE_HOOK': True,
#     'ENABLE_COOKIE': False,
#     'FORCE_IP_ADDR': None,
#     'USER_CONSENT_VALIDATOR': None
# }

CORS_ALLOWED_ORIGINS = [
    # Add the origins from which your React project will make requests
    'http://192.168.2.184',
    'ws://192.168.2.184',
    'https://pandagrown.com',
]

ROOT_URLCONF = 'panda_backend.urls'
AUTH_USER_MODEL = 'user.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'panda_backend.wsgi.application'
ASGI_APPLICATION = 'panda_backend.routing.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('localhost', 6379)],  # Adjust host and port accordingly
        },
    },
}
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BROKER_CONNECTION_RETRY ='False'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP ='True'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'pga_main',
        'USER': 'asuser',
        'PASSWORD': 'Qwe123@@',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True

JWT_CONF = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'TOKEN_LIFETIME_HOURS': 24,
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    #'SIGNING_KEY': settings.SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken','rest_framework_simplejwt.tokens.RefreshToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(hours=24),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'auth.authentication.JWTAuthentication',
    ]
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.privateemail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'no-reply@pandagrown.com'
EMAIL_HOST_PASSWORD = 'QGiWiJKWKHyW'
DEFAULT_FROM_EMAIL = 'no-reply@pandagrown.com'

COINBASE_COMMERCE_API_KEY = 'af58be4b-1347-4b21-b167-74f2b18d73c0'
COINBASE_COMMERCE_WEBHOOK_SHARED_SECRET = '8eda1940-9913-4d18-bd29-cdbf979b0877'

SERVICE_FEE = 2 # fixed 2 dollars
WITHDRAWAL_MIN = 20
SERVICE_SILICA_PERIOD = 3
SERVICE_BOTANICARE_PERIOD = 7
SERVICE_RHIZO_PERCENT = 4.6

SERVICE_SILICA_FEE = 1
SERVICE_BOTANICARE_FEE = 3
SERVICE_RHIZO_FEE = 2

SERVICE_EMAIL_RESEND_TIME_SECONDS = 300
# STRIPE
STRIPE_TEST_PUBLISHABLE_KEY=os.environ.get('STRIPE_TEST_PUBLISHABLE_KEY')
STRIPE_TEST_SECRET_KEY=os.environ.get('STRIPE_TEST_SECRET_KEY')

HOST_URL = 'https://pandagrown.com/'
STATIC_URL = '/static/'
WS_URL = 'wss://api.pandagrown.com/ws/0/'
MEDIA_URL_ABSOLUTE = 'images/' # to load media files on admin page as well (changes in url.py file also, project level)
PAPER_URL_ABSOLUTE = 'papers/'
MEDIA_URL = 'https://api.pandagrown.com/images/'
PAPER_URL = 'https://api.pandagrown.com/papers/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images')
PAPER_ROOT = os.path.join(BASE_DIR, 'static/papers')
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# cors origin
CORS_ALLOW_ALL_ORIGINS = True
